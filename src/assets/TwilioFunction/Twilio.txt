const sg = require('@sendgrid/mail');

function errorResponse(response, message) {
  response.setStatusCode(400);
  response.setBody({ success: false, error: message });
  return response;
}

exports.handler = async function (context, event, callback) {
  const response = new Twilio.Response();
  response.appendHeader('Content-Type', 'application/json');
  response.appendHeader("Access-Control-Allow-Origin", "*");
  response.appendHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  response.appendHeader("Access-Control-Allow-Headers", "Content-Type");

   if (event.httpMethod === 'OPTIONS') {
    response.setStatusCode(200);
    return callback(null, response);
  }

 const {
 query,
 email,
subject
} = event;

if (!query || !email || !subject) {
    return callback(
      null,
      errorResponse(response, "Request body is missing query, email, or subject.")
    );
  }


const greetingMessage = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap" rel="stylesheet" />
        <title>Contact Form Submission</title>
        <style>
            body {
                margin: 0;
                padding: 0;
            }
            .container {
                padding: 20px;
            }
            .text-container {
                flex: 1;
            }
            .text{
               font-family: "Plus Jakarta Sans", sans-serif;
               font-optical-sizing: auto;
               font-style: normal;
               font-size: 18px;
               color: #302353;
            }
            .text__span{
              display: block;
            }
            .link {
                text-decoration: none;
                color: #302353;
            }
            .link-item {
                text-decoration: none;   
            }
            .company-title{
               font-family: "Plus Jakarta Sans", sans-serif;
               font-optical-sizing: auto;
               font-style: normal;
               font-size: 34px;
               font-weight: 800;
               letter-spacing: 3px;
               margin-right: 10px;
               color: #302353;
            }
            .company-title__secondary {
               font-family: "Plus Jakarta Sans", sans-serif;
               font-optical-sizing: auto;
               font-style: normal;
               font-size: 34px;
               font-weight: 800;
               letter-spacing: 3px;
               margin: 0;
               color: #815bdd; 
            }
            .footer{
               padding: 0;
            }
            .footer-wrapper{
                padding: 0 24px;
            }
            .sub-title{
                font-family: "Plus Jakarta Sans", sans-serif;
                font-optical-sizing: auto;
                font-style: normal;
                margin: 0;
                font-size: 17px;
                line-height: 1.43;
                letter-spacing: 0.01071em;
                color: #815bdb;
            }
            .address {
                text-align: start;
                margin-left: auto;
            }
            .address-item {
                font-family: "Plus Jakarta Sans", sans-serif;
                font-optical-sizing: auto;
                font-style: normal;
                margin: 0;
                font-size: 14px;
                font-weight: 400;
                max-width: 300px;
                color: #747474;
            }
            .address-item__location {
                color: #d1d1d1;
            }
        </style>
    </head>
    <body>
        <div class="container">
         <a class="link" href="#"><span class="company-title">SOLUM</span><span class="company-title__secondary">FINANCIAL</span></a>
            <div class="text-container">
                <p class="text">Dear Applicant,</p>
                <p class="text">I hope this message finds you well. </p>
                <p class="text">I wanted to personally reach out to thank you for contacting us. </p>
                <p class="text">I'm writing to confirm that we've received your query request. Our team is currently processing this information and will be in touch with you shortly. <br/>
                If you have any questions or need any assistance in the meantime, please don't hesitate to reach out to us! <br/>
                Thank you once again for choosing Solum Financial. We truly appreciate your business and look forward to delivering an exceptional experience. </p>
                <span class="text">Best regards,</span>
                <span class="text text__span">Name</span>
                <span class="text text__span">Position</span>
            </div>
        </div>
        <footer class="footer">
            <div class="footer-wrapper">
                <div>
                    <a class="link" href="#"><span class="company-title">SOLUM</span><span class="company-title__secondary">FINANCIAL</span></a>
                    <p class="sub-title">Dedicated to derivatives</p>
                </div>
                <div class="address">
                    <a class="link-item" href="tel:004402077869230"">
                        <p class="address-item">+44 (0)207 786 9230</p>
                    </a>
                    <a href="https://www.linkedin.com/company/solum-financial-partners-llp/">
                        <p class="address-item">LinkedIn: xplainfinancial</p>
                    </a>
                    <a href="https://www.xplainfinancial.com/">
                        <p class="address-item">xplainfinancial.com</p>
                    </a>
                    <p class="address-item address-item__location">A Solum Financial Product</p>
                    <p class="address-item address-item__location">Gridiron building, 1 Pancras Square, N1C 4AG, London</p>
                </div>
            </div>
        </footer>
    </body>
    </html>
`;


const htmlContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Contact Form Submission</title>
        <style>
            table {
                width: 100%;
                border-collapse: collapse;
            }
            th, td {
                padding: 8px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            th {
                background-color: #f2f2f2;
            }
            ul {
                padding: 0;
            }
        </style>
    </head>
    <body>
        <table>
            <tr>
                <th>Field</th>
                <th>Value</th>
            </tr>
            <tr>
                <td>Query</td>
                <td>${query}</td>
            </tr>
            <tr>
                <td>Business Email</td>
                <td>${email}</td>
            </tr>
            <tr>
                <td>Subject</td>
                <td>${subject}</td>
            </tr>
        </table>
    </body>
    </html>
  `;

  if (!email) {
    return callback(
      null,
      errorResponse(response, "Request body is missing or does not contain email.")
    );
  }

  sg.setApiKey(context.SENDGRID_API_KEY);

  const clientMessage = {
    to: email,
    from: { email: context.FROM_EMAIL_ADDRESS, name: 'Query Request' },
    subject: `[Contact Form Submission] || Solum Financial`,
    html: greetingMessage,
  };

  const dbInfo = {
    to: context.FROM_EMAIL_ADDRESS,
    from: { email: context.FROM_EMAIL_ADDRESS, name: 'New Client Contact Request' },
    subject: `[Contact Form Submission] || Solum Financial`,
    html: htmlContent,
  };


  try {
    await sg.send(clientMessage);
    await sg.send(dbInfo);
    response.setStatusCode(200);
    response.setBody({ success: true });
    return callback(null, response);
  } catch (error) {
    console.error(error);
    let message = error.message;
    if (error.response) {
      console.error(error.response.body);
      message = error.response.body.errors[0];
    }
    return callback(null, errorResponse(response, message));
  }
};
